from portfolio import Asset, Direction, Order, Portfolio
from portfolio import InsufficientFundsException, AssetNotPresentException

import pytest


def create_test_portfolio() -> Portfolio:
    """Initialize a test portfolio"""
    return Portfolio(name="Dedicated portfolio", balance=100)


def create_test_asset() -> Asset:
    """Initialize a default test asset"""
    return Asset(name="IBM", price=25.0)


def test_asset_class():
    """Test initialization and attribute assignment of assets"""

    # bare minimum constructor
    assert Asset("IBM").name == "IBM", "Asset name should be IBM"
    assert Asset("IBM").price == 0.0, "Asset price should be zero"

    # setting price manually
    a = Asset("IBM")
    a.name = "AAPL"
    a.price = 25.0
    assert a.price == 25.0, "Asset price should be 25.0"
    assert a.name == "AAPL", "Asset name should be AAPL"


def test_asset_exceptions():
    """Test the exceptions generated by the Asset class"""
    with pytest.raises(ValueError):
        Asset(name="")
        Asset(name="IBM", price=-1.0)
        Asset.price = -2.0



def test_order_class():
    """Test initialization of the order class"""
    # create asset object (tested elsewhere)
    a = create_test_asset()

    assert Order(asset=a, direction=Direction.BUY, qty=2).asset.name == "IBM", \
        "Asset name should be IBM"
    assert Order(asset=a, direction=Direction.BUY, qty=2).asset.price == 25.0, \
        "Asset price should be 25.0"
    assert Order(asset=a, direction=Direction.BUY, qty=2).quantity == 2, \
        "Quantity should be 2"
    assert Order(asset=a, direction=Direction.BUY, qty=2).direction == Direction.BUY, \
        "Direction should be BUY"

    # test the value of this order is correct, using floating point approximation
    assert Order(asset=a, direction=Direction.BUY, qty=2).value() == pytest.approx(50)


def test_order_exceptions():
    """Test the exceptions associated with the Order class"""
    a = create_test_asset()

    with pytest.raises(ValueError):
        Order(asset=None, direction=Direction.BUY, qty=2)
        Order(asset=a, direction=Direction.SELL, qty=0)

    with pytest.raises(TypeError):
        # Not sure if this is the right test here for the enumeration
        Order(asset=a, direction="BUY", qty=2)


def test_order_interfaces(capsys):
    """Test logging/print messages for the Order class

    N.B. This can be captured using the capsys fixture.  Refer to
    https://docs.pytest.org/en/stable/capture.html for more details"""

    a = create_test_asset()

    print(Order(asset=a, direction=Direction.BUY, qty=2))
    captured = capsys.readouterr()
    assert captured.out == "Order details: (IBM, Qty: 2, Value: 50.0)\n"


def test_portfolio():
    """Functions to test normal portfolio operations"""
    a = create_test_asset()
    o_buy = Order(asset=a, direction=Direction.BUY, qty=1)
    o_sell = Order(asset=a, direction=Direction.SELL, qty=1)

    p = Portfolio(name="My portfolio", balance=100)
    assert p.name == "My portfolio", "Name should be My portfolio"
    assert p.balance == pytest.approx(100), "Balance should be 100"
    assert len(p.assets) == 0, "Should have 0 assets in portfolio"

    # add order(s) to the portfolio
    p.placeOrder(o_buy)
    assert len(p.assets) == 1, "Should only have 1 asset"
    assert p.balance == pytest.approx(75), "Balance should be 75"
    p.placeOrder(Order(asset=a, direction=Direction.BUY, qty=2))
    assert len(p.assets) == 3, "Should have 3 assets"
    assert p.balance == pytest.approx(25), "Balance should be 25"
    p.placeOrder(o_buy)
    assert len(p.assets) == 4, "Should only have 4 assets"
    assert p.balance == pytest.approx(0), "Balance should be 0"
    p.invest(100)
    assert p.balance == pytest.approx(100), "Balance should be 100"

    # sell orders
    p.placeOrder(o_sell)
    assert len(p.assets) == 3, f"Should have 3 assets after sale of 1, have {len(p.assets)}"
    assert p.balance == pytest.approx(125), "Balance should be 125"
    p.placeOrder(Order(asset=a, direction=Direction.SELL, qty=2))
    assert len(p.assets) == 1, "Should only have 1 asset after sale of 2"
    assert p.balance == pytest.approx(175), "Balance should be 175"


def test_portfolio_exceptions():
    """Functions to test portfolio exceptions"""

    # test initialization
    p = create_test_portfolio()
    with pytest.raises(ValueError):
        Portfolio(name="", balance=100)
        Portfolio(name="My portfolio", balance=0)
        Portfolio(name="My portfolio", balance=-100)
        p.invest(-100)

    # check order type error
    with pytest.raises(TypeError):
        p.placeOrder(order=None)


def test_custom_exceptions():
    """Test custom exception classes"""

    # test the handling of the overall portfolio
    p = create_test_portfolio()
    a1 = create_test_asset()
    o_buy1 = Order(asset=a1, direction=Direction.BUY, qty=5)
    o_sell1 = Order(asset=a1, direction=Direction.SELL, qty=1)

    # p1 has some existing stocks of a different asset
    p1 = Portfolio(name="Mixed portfolio", balance=100)
    p1.placeOrder(Order(asset=a1, direction=Direction.BUY, qty=1))

    # additional asset for mixed-asset portfolio
    a2 = Asset(name="AAPL", price=20.0)
    o_buy2 = Order(asset=a2, direction=Direction.BUY, qty=4)
    o_sell2 = Order(asset=a2, direction=Direction.SELL, qty=1)

    with pytest.raises(AssetNotPresentException):
        # nothing to sell!
        p.placeOrder(o_sell1)
        p1.placeOrder(o_sell2)

    with pytest.raises(InsufficientFundsException):
        # insufficient funds
        p.placeOrder(o_buy1)
        p1.placeOrder(o_buy2)
